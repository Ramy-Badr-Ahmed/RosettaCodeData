program brilliant_numbers;
    init bs := brilliant(4);

    print('First 100 brilliant numbers:');
    loop for n in bs(1..100) do
        nprint(lpad(str n, 6));
        if (c +:= 1) mod 10 = 0 then
            print;
        end if;
    end loop;

    loop doing o +:= 1; while exists n = bs(i) | n >= 10**o do
        print('First brilliant number >= ' + lpad(str(10**o), 10) +
              ': ' + lpad(str n, 10) + ' at position ' + lpad(str i,6));
    end loop;

    proc brilliant(orders);
        primes := sieve(10**orders);
        groups := group_by_digit_count(primes);

        b := [];
        loop for group in groups do
            loop for i in [1..#group] do
                loop for j in [1..i] do
                    b with:= group(i) * group(j);
                end loop;
            end loop;
        end loop;
        return [x : x in {x : x in b}];
    end proc;

    proc group_by_digit_count(nums);
        magn := 10;
        groups := [];
        group := [];
        loop for n in nums do
            if n>=magn then
                magn *:= 10;
                groups with:= group;
                group := [];
            end if;
            group with:= n;
        end loop;
        if group /= [] then
            groups with:= group;
        end if;
        return groups;
    end proc;

    proc sieve(n);
        ps := [True] * n;
        p := 2;
        loop while p*p <= n do
            if ps(p) then
                c := p*p;
                loop while c<=n do
                    ps(c) := False;
                    c +:= p;
                end loop;
            end if;
            p +:= 1;
        end loop;
        return [i : i in [2..n] | ps(i)];
    end proc;
end program;
